<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<body topmargin=50 leftmargin=50>
	<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.4.2/angular.min.js"></script>
	<script src = "js/tournamentSetupService.js"></script>
	<script src = "js/tournamentCrudService.js"></script>
	<script src = "js/utilsService.js"></script>
	<style>
		.inputlabel {float:left; clear:both; text-align:right; padding:5px; width:150px;}
		.inputwrapper {float:left; padding:5px;}
		body, select, input[type='button']{font: 11px arial;}
		#divAjaxError {color:red;}
	</style>
	<div ng-app="tournamentApp" ng-controller="tournamentController">
		<form name="tmtfrm" action="" method="post" novalidate>
			<div class=inputlabel>Tournament Format</div>
			<div class=inputwrapper>
				<select 
					required 
					name="format" 
					ng-model="tournamentParms.format" 
					ng-options="format.description 
								group by format.orientation.description 
								for format in model.formatTypes 
								track by format.name">
						<option value=""><- Select One -></option>
				</select>
			</div>
			<div class=inputlabel>Game Type</div>
			<div class=inputwrapper>
				<select 
					required 
					name="gameType" 
					ng-model="tournamentParms.gameType" 
					ng-options="gameType.description 
								for gameType in model.gameTypes 
								track by gameType.name">
						<option value=""><- Select One -></option>
				</select>
			</div>
			<div class=inputlabel>Matching Method</div>
			<div class=inputwrapper>
				<select 
					required 
					name="matchingMethod" 
					ng-model="tournamentParms.matchingMethod" 
					ng-options="matchingMethod.description 
								group by matchingMethod.name 
								for matchingMethod in model.matchingMethods 
								track by matchingMethod.value">
						<option value=""><- Select One -></option>
				</select>
			</div>
			<div class=inputlabel>Games Per Match</div>
			<div class=inputwrapper>
				<select 
					required 
					name="gamesPerMatch" 
					ng-model="tournamentParms.gamesPerMatch" 
					ng-options="nbr for nbr in model.gamesPerMatch track by nbr">
						<option value=""><- Select One -></option>
				</select>
			</div>
			<div class=inputlabel>Player Count</div>
			<div class=inputwrapper>
				<select 
					required 
					name="playerCount" 
					ng-model="tournamentParms.playerCount" 
					ng-options="nbr for nbr in model.playerCount.options track by nbr">
						<option value=""><- Select One -></option>
				</select>
			</div>
			<div class=inputlabel>&nbsp;</div>
			<div class=inputwrapper>
				<input 
					type="button" 
					value=" Build Tournament " 
					ng-click="getTournament();"
					ng-disabled="tmtfrm.format.$error.required || 
								 tmtfrm.gameType.$error.required || 
								 tmtfrm.matchingMethod.$error.required || 
								 tmtfrm.gamesPerMatch.$error.required || 
								 tmtfrm.playerCount.$error.required">
			</div>
			<div class=inputlabel>&nbsp;</div>
			<div class=inputwrapper id="divAjaxError">
				<div class=inputlabel ng-bind="ajaxErrorStatus" style="text-align:left;"></div>
				<div class=inputlabel>
					<pre ng-bind="ajaxErrorData" width="30"></pre>
				</div>
			</div>
		</form>
	</div>
	
	<script>
		var CRUD_SVC_URL = '/tournament/ws/rest/tournament/demo';
		var SETUP_SVC_URL = CRUD_SVC_URL + '/parms';
		
		var app = angular.module("tournamentApp", []);
		
		app.controller("tournamentController", function($scope, setupService, crudService, utilsService) {

			// Get an ajax promise for the model (dropdown options) and their default selections.
			setupService.setUrl(SETUP_SVC_URL);
			setupService.getModelOptions().then(
				function(options){
					$scope.model = options;
					$scope.tournamentParms = setupService.getDefaultSelections;
				},
				function(error) {
					utilsService.displayAjaxError(error, $scope);
				}
			);
			
			// Define an event to get an ajax promise to aquire the tournament json.
			$scope.getTournament = function() {
				crudService.getTournamentData($scope.tournamentParms).then(
					function(data){
						$scope.tournament = data;
					},
					function(error) {
						utilsService.displayAjaxError(error, $scope);
					}
				);
			};
		});

		// Setup injection for the various services.
		app.factory("utilsService", tournamentUtilsFactory);
		app.factory("setupService", tournamentSetupFactory);
		// There is no reason to use a provider here instead of a factory. Just trying new things out.
		app.provider("crudService", tournamentCrudProvider);
		app.config(function(crudServiceProvider){
			crudServiceProvider.setUrl(CRUD_SVC_URL);
		});

	</script>
</body>
</html>