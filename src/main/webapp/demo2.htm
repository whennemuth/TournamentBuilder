<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<html>
<body topmargin=50 leftmargin=50>
	<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.4.2/angular.min.js"></script>
	<script src = "http://ajax.googleapis.com/ajax/libs/angularjs/1.4.2/angular-route.min.js"></script>
	<script src = "js/tournamentSetupService.js"></script>
	<script src = "js/tournamentCrudService.js"></script>
	<script src = "js/bracketDirectives.js"></script>
	<script src = "js/utilsService.js"></script>
	<style>
		.inputlabel {float:left; clear:both; text-align:right; padding:5px; width:150px;}
		.inputwrapper {float:left; padding:5px;}
		body, select, input[type='button']{font: 11px arial;}
		#divAjaxError {color:red;}
		.bracket {float:left; border:1px solid green; margin:5px; padding:5px; background-color:#ccffcc;}
		.round {float:left; border:1px solid black; margin:5px; padding:5px; background-color:#ffe6cc;}
		.match {float:left; clear:both; border:1px solid black; margin:5px; padding:5px; background-color:#d9e6f2;}
		.side {float:left; clear:both; border:1px solid black; margin:5px; padding:5px; background-color:#f2d9d9;}
		.member {float:left; clear:both; border:1px solid black; margin:5px; padding:5px; background-color:#eeeedd;}
		.error {float:left; clear:both; border:1px solid black; margin:5px; padding:5px; color:#ff3333; background-color:#ffe6cc;}
	</style>
	
	<div ng-app="tournamentApp" ng-controller="tournamentController">
	
		<a href="#/parameters">parameters</a>&nbsp;&nbsp;	
		<a href="#/bracketView1">bracket view 1</a>&nbsp;&nbsp;	
		<a href="#/bracketView2">bracket view 2</a>&nbsp;&nbsp;	
		<a href="#/bracketView3">bracket view 3</a>&nbsp;&nbsp;	
		<a href="#/rawjson">raw json</a>&nbsp;&nbsp;	
		<a href="#" onclick="document.location.href = 'demo2.htm';">refresh</a>
		
		<div ng-view></div>
		
		<script type="text/ng-template" id="bracketView1.htm">
			<bracket1></bracket1>
		</script>		
		<script type="text/ng-template" id="bracketView2.htm">
			<round roundItem="tournament.brackets[0].rounds[0]"></round>
			{{tournament.brackets[0].rounds[0].matches.length}}<br><br>
<!--
			<div ng-repeat="item in tournament.brackets[0].rounds">
				<round roundItem="item"></round>
				{{item.matches.length}}
			</div>
-->
		</script>			
		<script type="text/ng-template" id="bracketView3.htm">
			<bracket3></bracket3>
		</script>		
		<script type="text/ng-template" id="rawjson.htm">
			<textarea cols=100 rows=30 style='float:left;'>{{tournament}}</textarea>
		</script>		
	</div>
	
	<script>
		var CRUD_SVC_URL = '/tournament/ws/rest/tournament/demo';
		var SETUP_SVC_URL = CRUD_SVC_URL + '/parms';
		
		var app = angular.module("tournamentApp", ['ngRoute']);
		
		app.config(['$routeProvider', function($routeProvider){
			$routeProvider
				.when('/parameters', {
					templateUrl: 'tournamentParameters.htm',
					controller: 'tournamentController'
				})
				.when('/bracketView1', {
					templateUrl: 'bracketView1.htm',
					controller: 'tournamentController'
				})
				.when('/bracketView2', {
					templateUrl: 'bracketView2.htm',
					controller: 'tournamentController'
				})
				.when('/bracketView3', {
					templateUrl: 'bracketView3.htm',
					controller: 'tournamentController'
				})
				.when('/rawjson', {
					templateUrl: 'rawjson.htm',
					controller: 'tournamentController'
				})
				.otherwise({
					redirectTo: '/parameters'
				});
		}]);
		
		/**
		 * NOTE: Whatever state is assigned to $scope is lost when the route is changed (ie: clicking a 
		 * link, href='#newRoute'). The controller is re-run and is passed a re-initialized $scope
		 * variable (state is blanked out). Therefore, state (like user input against the model or data 
		 * acquired from ajax calls) is not directly assigned to $scope in the success function of the 
		 * promise object when a route change is yet to occur. Instead, we take advantage of the fact that the 
		 * injected services are singletons and their properties survive between route changes. State is 
		 * stored as service properties and is restored on the $scope variable each time the controller is run/re-run.
		 */
		app.controller("tournamentController", function($scope, $routeParams, $location, setupService, crudService, utilsService) {

			// Get an ajax promise for the model (dropdown options) and their default selections.
			setupService.setUrl(SETUP_SVC_URL);
			setupService.getModelOptions().then(
				function(options){
					$scope.model = options;
					$scope.tournamentParms = setupService.getDefaultSelections;
					$scope.tournament = crudService.getData();
				},
				function(error) {
					utilsService.displayAjaxError(error, $scope);
				}
			);
			
			// Define an event to get an ajax promise to aquire the tournament json.
			$scope.getTournament = function() {
				crudService.getTournamentData($scope.tournamentParms).then(
					function(data){
						$location.url('/bracketView2'); // change the route to view the json data of the tournament.
					},
					function(error) {
						utilsService.displayAjaxError(error, $scope);
					}
				);
			};
		});

		// Setup injection for the various services.
		app.factory("utilsService", tournamentUtilsFactory);
		app.factory("setupService", tournamentSetupFactory);
		app.factory("bracketDirectiveService", bracketDirectiveFactory);
		// There is no reason to use a provider here instead of a factory. Just trying new things out.
		app.provider("crudService", tournamentCrudProvider);
		app.config(function(crudServiceProvider){
			crudServiceProvider.setUrl(CRUD_SVC_URL);
		});

		// Set up directives
		app.directive("bracket1", function(bracketDirectiveService) { 
			return bracketDirectiveService.directive1
		})
//		.directive("bracket2", function(bracketDirectiveService) { 
//			return bracketDirectiveService.directive2_bracket
//		})
		.directive("round", function(bracketDirectiveService) {
			return bracketDirectiveService.directive2_round;
		})
		.directive("bracket3", function(bracketDirectiveService) { 
			return bracketDirectiveService.directive3
		});

	</script>
</body>
</html>